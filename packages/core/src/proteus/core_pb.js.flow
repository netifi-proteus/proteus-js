/**
 * Copyright (c) 2017-present, Netifi Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @flow
 */

import type { ByteSource } from "google-protobuf";

import { Message, ExtensionFieldInfo, ExtensionFieldBinaryInfo, BinaryReader, BinaryWriter } from "google-protobuf";

declare export class Ack mixins Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): any;
  static toObject(includeInstance: boolean, msg: Ack): any;
  static extensions: { [key: number]: ExtensionFieldInfo<Message> };
  static extensionsBinary: { [key: number]: ExtensionFieldBinaryInfo<Message> };
  static serializeBinaryToWriter(message: Ack, writer: BinaryWriter): void;
  static deserializeBinary(bytes: ByteSource): Ack;
  static deserializeBinaryFromReader(message: Ack, reader: BinaryReader): Ack
}

declare export class Empty mixins Message {
  serializeBinary(): Uint8Array;
  toObject(includeInstance?: boolean): any;
  static toObject(includeInstance: boolean, msg: Empty): any;
  static extensions: { [key: number]: ExtensionFieldInfo<Message> };
  static extensionsBinary: { [key: number]: ExtensionFieldBinaryInfo<Message> };
  static serializeBinaryToWriter(message: Empty, writer: BinaryWriter): void;
  static deserializeBinary(bytes: ByteSource): Empty;
  static deserializeBinaryFromReader(message: Empty, reader: BinaryReader): Empty
}
